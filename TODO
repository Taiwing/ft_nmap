- Try and fix ACK scan false 'positive' tests, meaning all
  the ports on which the scan result ends up randomly
  filtered where the original nmap always says unfiltered.
  It does not happen often (like 3/4 times on 1024 ports)
  but it still makes the result false and unreliable. The
  ACK scan should get an RST response for ending up in an
  unfiltered state, then sometimes it must not receive
  the RST response, or indeed any response at all. Either
  that or it gets an icmp packet out of the blue...
- Fix UDP scans missing close results. Like for the ACK
  scan, sometimes (actually most of the time for UDP),
  ft_nmap seems to be missing some responses, and so the
  UDP ports appear to be open|filtered when they should
  be closed. The scan just timeouts for no reason. This
  does not happen when the scan is done without speedup
  or with a low speedup and a limited amount of ports.
  Then this problem is probably has probably something
  to do with pcap_handler. It looks like it misses some
  responses when they come too close to one another.
  This is also certainly responsible for the missing
  unfiltered ACK scan results.
- The SYN scan looks reliable enough. Although it
  appears to fail some of the time too. It happened once
  on an 'intra.42.fr' scan (missing ariel3 port), and on
  'framasoft.org' it can happen too (saw it multiple
  times). This is also probably the same problem as for
  the ACK and UDP scans. The fact that it happens more
  and more as we 'go up' the scan list (because SYN is 0
  and UDP is 5 while ACK is in the middle, which is also
  how often this problem appears on each scan type), is
  probably be a hint to the root of the problem.
  UPDATE: It looks like each scan works as expected if
  executed individually (except maybe UDP, which is more
  complicated than the others as it takes at least 20min
  on a full 1024 ports scan for  the original nmap).
  The scans should probably be done consecutively,
  meaning that each scan type and their retries should
  be done on every port before the next scan type. This
  looks like the problem is caused by crossing the
  streams as the ghost busters would put it. If we try
  a lot of scans of different types at the same time,
  it just fails, probably because of firewall rules or
  of network overload.
  UPDATE2: For UDP and the closed/filtered states and
  for NULL/FIN/XMAS and the filtered state, the problem
  is that the linux kernel caps outgoing icmp packets to
  1 per second. This is why the UDP scan takes around 20
  minutes for on 1024 ports. There is no workaround for
  this. The only way is to scan once per second and limit
  retries to one. An other way to accelerate the process
  would be start with the ports where there are probes
  defined in nmap-payloads, as they have at least a
  chance to instantly return a UDP response (although,
  the time earned would be very small compared to the
  total time the scan would take).

- Rework the monothread logic so that ft_nmap is able to
  execute multiple scans at the same time. The solution
  might be to send multiple probes in a row in the alarm
  handler after the listening function has been called.
  This looks dirty, but it might be the only solution to
  pass the first test on the correction sheet, because
  with the original nmap I can justify a runtime of 20min
  for the UDP scan only not 8 hours. So ft_nmap, with
  every scan flag and no speedup should take around 20min
  too.

- Also fix false 'positive' tests for SYN scan (example
  on framasoft.org for ports 137, 138 and 179). They
  also appear filtered when the original set them to
  closed. As for the ACK scan, it's probably because the
  probe timeouts when it should not. It somehow does not
  see the icmp response from framasoft.
  UPDATE: For 137 and 138, the behavior is normal, this
  is just because they are not part of the nmap default
  port set for some reason. For 179 (bgp), there is
  indeed a timeout for ft_nmap when there is a closed
  status for the original.
  UPDATE2: For 179 the behavior is different because
  ft_nmap scans the IPv6 address instead of the IPv4
  like the original does by default. If we specifically
  target the IPv6 address with the original nmap the
  port is also filtered instead of closed. When we force
  IPv4 on ft_nmap its behavior is the same as the
  orginal nmap (port 179 is closed).
- use IPv4 by default, not IPv6

- Try to fix the fact that some probes are sent/received
  after the result has been printed. It's not a big deal
  so if there is no way to do that cleanly, just dont.
  UPDATE: It may be a bigger problem than expected. On
  some 1024-port scans, there are some open ports that
  are often missed at the end of the list (like rsync).
  This might be the cause.
  UPDATE2: Well it also leads to a segfault when a
  worker tries to send a probe after the host scan has
  ended. It rarely happens normally, but it almost
  always does on multiple target scans when we set a
  wait time in between probes. This is obviously a big
  problem now. This has to be fixed. Either by making it
  impossible to have task execute after the host scan is
  over (which I don't know how to do since they both
  happen in a worker task and also depend on the alarm
  handler) or by keeping track of the task associated
  with a host and delaying host printing while there are
  some tasks being executed. This looks like the easiest
  solution but maybe not the cleanest. This also will
  possibly change because the probe execution order will
  probably be modified.

- fix sendto 'invalid argument' error when probing port
  8080 on the local network host address (it works on
  localhost, it works on the wifi local address, but not
  on the default ethernet lan address)
- check other scan results too
- adapt the filter to ipv6 for the icmp part (also maybe
  clean the function/divide it because it's messy)
- when all this is done, check that the scan results are
  the same as the original nmap and that it does not
  take too much time to execute
- then stress-test the shit out of this program (really)

- Implement a "watch" mode for the heatmap option where
  ft_nmap would be continuously scanning the target
  ports on a regular interval. Updating the map as it
  eventually changes and notifying the user when they
  do occur.
