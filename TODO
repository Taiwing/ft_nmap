- search and fix the reason of the non-exiting of some
  threads when doing a big number of scans

  Update 1: It looks like there is a problem with every
  type of scans except SYN and ACK, I think this is
  because the vas majority of the time these scans get
  a response (on localhost anyway) whereas the other will
  often timeout. Timeout handling is at the source of this
  problem then. This will have to be further investigated.

  Update 2: Well... It just seems like pcap_breakloop does
  not work at all. This actually makes sense. And here I
  thought the man page was wrong and outdated. No, non
  response just did not happen that often (at least in my
  local tests). So yeah it turns out the man page was
  right and the pcap_breakloop call does nothing really.

  So an other timeout system will have to be found, or the
  structure of ft_nmap will have to be drastically changed.
  The only other 'timeout solution' I see working is kind
  of really hacky. It would be to send a dedicated packet
  to threads after timeout. Like an ICMP response with a
  TIMEOUT type/code (make it so it passes the filters) and
  maybe use a special port only to reduce false positives.
  This could work locally at least, but I am not sure it
  would on the default ethernet interface... This would
  have to be tested.

  The more drastic solution would be to change ft_nmap
  structure so that we have only one pcap handle reading
  packets. This would mean that the main thread would act
  as a 'router' to the waiting threads. It would wait for
  the packets to arrive and send them to the appropriate
  thread. The sending probably could be done in each
  thread instead of in the main one. Of course this would
  maean using a mutex for sending packets on the same
  socket. Then pcap_breakloop would always be used just
  one time at the end of the program's execution. This
  may just be the only solution... I dont like this but
  I do not think I have a choice. Also, it would mean
  re-working the job system since right now it assumes
  scans from a job can be made while an other one is not
  finished. This would not be possible with this way of
  doing things (or this would require multiple "listening"
  threads, but this is not possible as the alarm signal
  only activates the alarm handler of the main thread, so
  once running we would run into the same problem we have
  now, we would have no way of stopping it...).


- Try and fix ACK scan false 'positive' tests, meaning all
  the ports on which the scan result ends up randomly
  filtered where the original nmap always says unfiltered.
  It does not happen often (like 3/4 times on 1024 ports)
  but it still makes the result false and unreliable. The
  ACK scan should get an RST response for ending up in an
  unfiltered state, then sometimes it must not receive
  the RST response, or indeed any response at all. Either
  that or it gets a icmp packet out of the blue...
- check other scan results too
- close every active pcap handle in exit cleanup handler
- adapt the filter to ipv6 for the icmp part (also maybe
  clean the function/divide it because it's messy)
- uncomment the 'exit if packet->size' in pcap handler
  to test if it still is used multiple times by thread
  (which it should not, it should stop to one packet)
- when all this is done, check that the scan results are
  the same as the original nmap and that it does not
  take too muche time to execute
- then stress-test the shit out of this program (really)
