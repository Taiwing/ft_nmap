- Make it possible to have multiple probes per scans to
  handle udp payloads. This means changing probe structure
  to scan_job again and turn the packet field into a an
  array of packets (or find a way to store multiple probe
  packets for a scan). Every possible payload should be
  sent when scanning a UDP port with an nmap-payloads
  entry.
- Try and fix ACK scan false 'positive' tests, meaning all
  the ports on which the scan result ends up randomly
  filtered where the original nmap always says unfiltered.
  It does not happen often (like 3/4 times on 1024 ports)
  but it still makes the result false and unreliable. The
  ACK scan should get an RST response for ending up in an
  unfiltered state, then sometimes it must not receive
  the RST response, or indeed any response at all. Either
  that or it gets an icmp packet out of the blue...
- Also fix false 'positive' tests for SYN scan (example
  on framasoft.org for ports 137, 138 and 179). They
  also appear filtered when the original set them to
  closed. As for the ACK scan, it's probably because the
  probe timeouts when it should not. It somehow does not
  see the icmp response from framasoft.
  UPDATE: For 137 and 138, the behavior is normal, this
  is just because they are not part of the nmap default
  port set for some reason. For 179 (bgp), there is
  indeed a timeout for ft_nmap when there is a closed
  status for the original.
  UPDATE2: For 179 the behavior is different because
  ft_nmap scans the IPv6 address instead of the IPv4
  like the original does by default. If we specifically
  target the IPv6 address with the original nmap the
  port is also filtered instead of closed. When we force
  IPv4 on ft_nmap its behavior is the same as the
  orginal nmap (port 179 is closed).
- use IPv4 by default, not IPv6
- fix sendto 'invalid argument' error when probing port
  8080 on the local network host address (it works on
  localhost, it works on the wifi local address, but not
  on the default ethernet lan address)
- check other scan results too
- adapt the filter to ipv6 for the icmp part (also maybe
  clean the function/divide it because it's messy)
- when all this is done, check that the scan results are
  the same as the original nmap and that it does not
  take too much time to execute
- then stress-test the shit out of this program (really)
