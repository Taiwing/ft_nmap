---- FIX ----

- FIX ALL THAT SHIT
  4: The RTT of a response are very different from a host
  to an other. So execute a ping first, then wait for 10
  responses and use the average RTT as a basis for
  computing the timeout of probes. This will also say if
  the host is up or not, so ft_nmap will skip scanning
  all together if the host is down (like the original).

- FIX false non-responsive diagonostic on some UDP scans. This is because when
  UDP scan is done together with other scans an other one might potentially
  'exhaust out' a host's ICMP rate limit before the UDP scan. So ICMP rate
  limiting needs to be detected globally. Then the rate-limit can be applied if
  ICMP responses are detected on the UDP scan (or on an other scan as an
  exponential-backoff option could be created to explicitly wait for ICMP
  replies on the given list of scan [it would take the same arguments as the
  --scan option, or no argument for every scan]). Or MAYBE, just MAYBE leave it
  as is. This is not high-priority. The UDP scan should handle ICMP rate limits
  just fine if it is done on its one (meaning -sU is given to ft_nmap).

- FIX potential infinite loop if there is a fatal error in a thread while a task
  is executing after the end of a host task. This is very unlikely to happen,
  but theoretically it could. If it did, the running task counter would never be
  decreased, so the loop would just keep on looping on. The simple fix would be
  to add '&& !cfg->end' because the atexit handler of the threads will set this
  value to true when they're called. It would bypass the running tasks waiting
  loop. The cfg->end value would need to be checked after the loop to abort the
  function (this is in the new_host() function at the running tasks while loop).

- CHECK and maybe FIX possible concurrency issue for the main_tasks list. The
  listen task is added without mutex locking, which is not a problem at this
  moment since no thread should be editing it because the listening has not
  started so replies cannot have been received. But when the scanning is done,
  when the last probe has been replied to or has timed out, the main_tasks list
  will be edited with a mutex lock. This is a problem because it could happen
  at the same time the listening task is added. I mean this really theoretical
  because even with one probe, zero retry and only timeout, some time should
  pass between new_host and the last reply. But it's not impossible.

---- TODO ----

- Because of ICMP rate-limiting, I can justify a runtime of
  arount 20min for the UDP scan only not 8 hours. So ft_nmap
  with every scan flag and no speedup should take around 20
  minutes too. However, this might be wrong because NULL,
  FIN and XMAS scans also depend on ICMP to get an accurate
  result. In fact, there is only SYN and ACK which dont
  have any problem with ICMP rate-limiting. Although RST
  responses can also be rate-limited. So this still might
  be a problem there too.

- check what happens now when we scan on port listened on
  by an other process (like with drake_simulator on 8080)
- when all this is done, check that the scan results are
  the same as the original nmap and that it does not take
  too much time to execute
- Make sure time options (and options in general) cannot
  be given values that would make ft_nmap lose its mind.
  Like, what happens if the max_rtt_timeout value makes
  the probe_retry_time overflow on the expiry timestamp?
- then stress-test the shit out of this program (really)

---- MAYBE ----

- Implement a "watch" mode for the heatmap option where
  ft_nmap would be continuously scanning the target
  ports on a regular interval. Updating the map as it
  eventually changes and notifying the user when they
  do occur.
